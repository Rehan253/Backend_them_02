defmodule AsBackendTheme2Web.Endpoint do
  use Phoenix.Endpoint, otp_app: :as_backend_theme2

  # The session will be stored in the cookie and signed,
  # this means its contents can be read but not tampered with.
  # Set :encryption_salt if you would also like to encrypt it.
  @session_options [
    store: :cookie,
    key: "_as_backend_theme2_key",
    signing_salt: "1vIQEFCU",
    same_site: "Lax"
  ]

  socket "/live", Phoenix.LiveView.Socket,
    websocket: [connect_info: [session: @session_options]],
    longpoll: [connect_info: [session: @session_options]]

  # Serve at "/" the static files from "priv/static" directory.
  #
  # When code reloading is disabled (e.g., in production),
  # the `gzip` option is enabled to serve compressed
  # static files generated by running `phx.digest`.
  plug Plug.Static,
    at: "/",
    from: :as_backend_theme2,
    gzip: not code_reloading?,
    only: AsBackendTheme2Web.static_paths()

  # Code reloading can be explicitly enabled under the
  # :code_reloader configuration of your endpoint.
  if code_reloading? do
    plug Phoenix.CodeReloader
    plug Phoenix.Ecto.CheckRepoStatus, otp_app: :as_backend_theme2
  end

  plug Phoenix.LiveDashboard.RequestLogger,
    param_key: "request_logger",
    cookie_key: "request_logger"

  plug Plug.RequestId
  plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]

  plug Plug.Parsers,
    parsers: [:urlencoded, :multipart, :json],
    pass: ["*/*"],
    json_decoder: Phoenix.json_library()

  plug Plug.MethodOverride
  plug Plug.Head
  plug Plug.Session, @session_options

  defmodule CORSPlug do
    import Plug.Conn

    def init(opts), do: opts

    def call(conn, _opts) do
      conn =
        conn
        |> put_resp_header("access-control-allow-origin", "*")
        |> put_resp_header("access-control-allow-methods", "GET, POST, PUT, DELETE, OPTIONS")
        |> put_resp_header("access-control-allow-headers", "content-type, authorization")

      if conn.method == "OPTIONS" do
        conn |> send_resp(200, "") |> halt()
      else
        conn
      end
    end
  end

  plug CORSPlug
  plug AsBackendTheme2Web.Router
end
